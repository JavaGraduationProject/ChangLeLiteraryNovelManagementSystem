2022-02-22 10:32:42,501 INFO (StartupInfoLogger.java:50)- Starting FrontNovelApplication on LAPTOP-T7DEB7H8 with PID 51084 (E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem\novel-front\target\classes started by yangys in E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem)
2022-02-22 10:32:42,501 INFO (StartupInfoLogger.java:50)- Starting FrontNovelApplication on LAPTOP-T7DEB7H8 with PID 51084 (E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem\novel-front\target\classes started by yangys in E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem)
2022-02-22 10:32:42,505 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2022-02-22 10:32:42,505 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2022-02-22 10:32:42,505 INFO (SpringApplication.java:652)- The following profiles are active: website,alipay,oss,fastdfs,dev,common-dev,common
2022-02-22 10:32:42,505 INFO (SpringApplication.java:652)- The following profiles are active: website,alipay,oss,fastdfs,dev,common-dev,common
2022-02-22 10:32:43,766 INFO (RepositoryConfigurationDelegate.java:244)- Multiple Spring Data modules found, entering strict repository configuration mode!
2022-02-22 10:32:43,773 INFO (RepositoryConfigurationDelegate.java:126)- Bootstrapping Spring Data repositories in DEFAULT mode.
2022-02-22 10:32:43,833 INFO (RepositoryConfigurationDelegate.java:182)- Finished Spring Data repository scanning in 49ms. Found 0 repository interfaces.
2022-02-22 10:32:43,861 INFO (RepositoryConfigurationDelegate.java:244)- Multiple Spring Data modules found, entering strict repository configuration mode!
2022-02-22 10:32:43,862 INFO (RepositoryConfigurationDelegate.java:126)- Bootstrapping Spring Data repositories in DEFAULT mode.
2022-02-22 10:32:43,887 INFO (RepositoryConfigurationDelegate.java:182)- Finished Spring Data repository scanning in 13ms. Found 0 repository interfaces.
2022-02-22 10:32:44,271 INFO (PostProcessorRegistrationDelegate.java:330)- Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$5bc498fa] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-02-22 10:32:44,609 INFO (TomcatWebServer.java:90)- Tomcat initialized with port(s): 8080 (http)
2022-02-22 10:32:44,621 INFO (DirectJDKLog.java:173)- Initializing ProtocolHandler ["http-nio-8080"]
2022-02-22 10:32:44,628 INFO (DirectJDKLog.java:173)- Starting service [Tomcat]
2022-02-22 10:32:44,629 INFO (DirectJDKLog.java:173)- Starting Servlet engine: [Apache Tomcat/9.0.24]
2022-02-22 10:32:44,756 INFO (DirectJDKLog.java:173)- Initializing Spring embedded WebApplicationContext
2022-02-22 10:32:44,756 INFO (ServletWebServerApplicationContext.java:284)- Root WebApplicationContext: initialization completed in 2071 ms
2022-02-22 10:32:45,115 INFO (HikariDataSource.java:110)- HikariPool-1 - Starting...
2022-02-22 10:32:45,204 INFO (HikariDataSource.java:123)- HikariPool-1 - Start completed.
2022-02-22 10:32:45,558 WARN (CacheConfiguration.java:1795)- Cache: util_cache has a maxElementsInMemory of 0. This might lead to performance degradation or OutOfMemoryError at Terracotta client.From Ehcache 2.0 onwards this has been changed to mean a store with no capacity limit. Set it to 1 if you want no elements cached in memory
2022-02-22 10:32:45,567 WARN (DiskStorePathManager.java:162)- diskStorePath 'E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem\cachedata' is already used by an existing CacheManager either in the same VM or in a different process.
The diskStore path for this CacheManager will be set to E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem\cachedata\ehcache_auto_created6868809037549240217diskstore.
To avoid this warning consider using the CacheManager factory methods to create a singleton CacheManager or specifying a separate ehcache configuration (ehcache.xml) for each CacheManager instance.
2022-02-22 10:32:45,567 WARN (DiskStorageFactory.java:134)- Data in persistent disk stores is ignored for stores from automatically created directories.
Remove diskPersistent or resolve the conflicting disk paths in cache configuration.
Deleting data file E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem\cachedata\ehcache_auto_created6868809037549240217diskstore\util_cache.data
2022-02-22 10:32:46,306 INFO (AbstractJestClient.java:60)- Setting server pool to a list of 1 servers: [http://192.168.0.105:9200]
2022-02-22 10:32:46,307 INFO (JestClientFactory.java:224)- Using multi thread/connection supporting pooling connection manager
2022-02-22 10:32:46,382 INFO (JestClientFactory.java:70)- Using custom GSON instance
2022-02-22 10:32:46,382 INFO (JestClientFactory.java:85)- Node Discovery disabled...
2022-02-22 10:32:46,382 INFO (JestClientFactory.java:97)- Idle connection reaping disabled...
2022-02-22 10:32:46,764 INFO (ExecutorConfigurationSupport.java:171)- Initializing ExecutorService 'taskScheduler'
2022-02-22 10:32:47,030 INFO (WelcomePageHandlerMapping.java:58)- Adding welcome page template: index
2022-02-22 10:32:47,072 WARN (TemplateMode.java:150)- [THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2022-02-22 10:32:47,574 WARN (RedisStarterDeprecationWarningAutoConfiguration.java:43)- spring-boot-starter-redis is deprecated as of Spring Boot 1.4, please migrate to spring-boot-starter-data-redis
2022-02-22 10:32:47,651 INFO (DirectJDKLog.java:173)- Starting ProtocolHandler ["http-nio-8080"]
2022-02-22 10:32:47,664 INFO (TomcatWebServer.java:202)- Tomcat started on port(s): 8080 (http) with context path ''
2022-02-22 10:32:47,667 INFO (StartupInfoLogger.java:59)- Started FrontNovelApplication in 5.965 seconds (JVM running for 8.019)
2022-02-22 10:32:47,667 INFO (StartupInfoLogger.java:59)- Started FrontNovelApplication in 5.965 seconds (JVM running for 8.019)
2022-02-22 10:33:11,547 INFO (DirectJDKLog.java:173)- A cookie header was received [1644941556; Hm_lvt_ecc8b50a3122e6d5e09be7a9e5383e07=1645432522] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2022-02-22 10:33:11,553 INFO (DirectJDKLog.java:173)- Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-02-22 10:33:11,553 INFO (FrameworkServlet.java:524)- Initializing Servlet 'dispatcherServlet'
2022-02-22 10:33:11,559 INFO (FrameworkServlet.java:546)- Completed initialization in 6 ms
2022-02-22 10:33:11,978 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status from book_setting t1 inner join book t2 on t1.book_id = t2.id order by t1.sort 
2022-02-22 10:33:11,978 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status from book_setting t1 inner join book t2 on t1.book_id = t2.id order by t1.sort 
2022-02-22 10:33:11,982 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_name, cat_id, title, create_time from news order by create_time DESC limit ? 
2022-02-22 10:33:11,982 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_name, cat_id, title, create_time from news order by create_time DESC limit ? 
2022-02-22 10:33:11,982 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by last_index_update_time DESC limit ? 
2022-02-22 10:33:11,982 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by create_time DESC limit ? 
2022-02-22 10:33:11,982 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by visit_count DESC limit ? 
2022-02-22 10:33:11,982 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by last_index_update_time DESC limit ? 
2022-02-22 10:33:11,982 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by create_time DESC limit ? 
2022-02-22 10:33:11,982 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by visit_count DESC limit ? 
2022-02-22 10:33:11,997 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2022-02-22 10:33:11,998 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 2(Long)
2022-02-22 10:33:11,997 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2022-02-22 10:33:11,998 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0(Integer), 10(Long)
2022-02-22 10:33:11,998 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0(Integer), 23(Long)
2022-02-22 10:33:11,998 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0(Integer), 10(Long)
2022-02-22 10:33:11,998 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0(Integer), 10(Long)
2022-02-22 10:33:11,998 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 2(Long)
2022-02-22 10:33:11,998 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0(Integer), 23(Long)
2022-02-22 10:33:11,998 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0(Integer), 10(Long)
2022-02-22 10:33:12,042 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:33:12,042 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:33:12,042 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:33:12,042 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:33:12,042 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:33:12,042 INFO (SQLLogger.java:71)- Logic SQL: select id, cat_name, cat_id, title, create_time from news order by create_time DESC limit ?
2022-02-22 10:33:12,042 INFO (SQLLogger.java:71)- Logic SQL: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status
        from book_setting t1 inner join book t2
        on t1.book_id = t2.id
        order by t1.sort
2022-02-22 10:33:12,042 INFO (SQLLogger.java:71)- Logic SQL: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by create_time DESC limit ?
2022-02-22 10:33:12,042 INFO (SQLLogger.java:71)- Logic SQL: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by visit_count DESC limit ?
2022-02-22 10:33:12,042 INFO (SQLLogger.java:71)- Logic SQL: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by last_index_update_time DESC limit ?
2022-02-22 10:33:12,043 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=news, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[TableToken(skippedSchemaNameLength=0, originalLiterals=news)], parametersIndex=1)), containStar=false, selectListLastPosition=48, groupByLastPosition=0, items=[CommonSelectItem(expression=cat_name, alias=Optional.absent()), CommonSelectItem(expression=cat_id, alias=Optional.absent()), CommonSelectItem(expression=create_time, alias=Optional.absent()), CommonSelectItem(expression=title, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.absent(), name=Optional.of(create_time), orderDirection=DESC, nullOrderDirection=ASC, index=-1, alias=Optional.absent())], limit=null, subQueryStatement=null)
2022-02-22 10:33:12,043 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id, cat_name, cat_id, title, create_time from news order by create_time DESC limit ? ::: [[2]]
2022-02-22 10:33:12,043 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book_setting, alias=Optional.of(t1)), Table(name=book, alias=Optional.of(t2))]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[TableToken(skippedSchemaNameLength=0, originalLiterals=book_setting), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=0)), containStar=false, selectListLastPosition=140, groupByLastPosition=0, items=[CommonSelectItem(expression=t2.book_name, alias=Optional.absent()), CommonSelectItem(expression=t2.score, alias=Optional.absent()), CommonSelectItem(expression=t2.author_name, alias=Optional.absent()), CommonSelectItem(expression=t1.book_id, alias=Optional.absent()), CommonSelectItem(expression=t1.type, alias=Optional.absent()), CommonSelectItem(expression=t2.cat_id, alias=Optional.absent()), CommonSelectItem(expression=t2.pic_url, alias=Optional.absent()), CommonSelectItem(expression=t2.cat_name, alias=Optional.absent()), CommonSelectItem(expression=t2.book_desc, alias=Optional.absent()), CommonSelectItem(expression=t2.book_status, alias=Optional.absent()), CommonSelectItem(expression=t1.sort, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.of(t1), name=Optional.of(sort), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.absent())], limit=null, subQueryStatement=null)
2022-02-22 10:33:12,043 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[ItemsToken(isFirstOfItemsSpecial=false, items=[visit_count AS ORDER_BY_DERIVED_0 ]), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=2)), containStar=false, selectListLastPosition=151, groupByLastPosition=0, items=[CommonSelectItem(expression=cat_name, alias=Optional.absent()), CommonSelectItem(expression=book_name, alias=Optional.absent()), CommonSelectItem(expression=pic_url, alias=Optional.absent()), CommonSelectItem(expression=last_index_id, alias=Optional.absent()), CommonSelectItem(expression=last_index_update_time, alias=Optional.absent()), CommonSelectItem(expression=cat_id, alias=Optional.absent()), CommonSelectItem(expression=word_count, alias=Optional.absent()), CommonSelectItem(expression=author_id, alias=Optional.absent()), CommonSelectItem(expression=book_desc, alias=Optional.absent()), CommonSelectItem(expression=last_index_name, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent()), CommonSelectItem(expression=author_name, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.absent(), name=Optional.of(visit_count), orderDirection=DESC, nullOrderDirection=ASC, index=-1, alias=Optional.of(ORDER_BY_DERIVED_0))], limit=null, subQueryStatement=null)
2022-02-22 10:33:12,043 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[ItemsToken(isFirstOfItemsSpecial=false, items=[create_time AS ORDER_BY_DERIVED_0 ]), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=2)), containStar=false, selectListLastPosition=151, groupByLastPosition=0, items=[CommonSelectItem(expression=cat_name, alias=Optional.absent()), CommonSelectItem(expression=book_name, alias=Optional.absent()), CommonSelectItem(expression=pic_url, alias=Optional.absent()), CommonSelectItem(expression=last_index_id, alias=Optional.absent()), CommonSelectItem(expression=last_index_update_time, alias=Optional.absent()), CommonSelectItem(expression=cat_id, alias=Optional.absent()), CommonSelectItem(expression=word_count, alias=Optional.absent()), CommonSelectItem(expression=author_id, alias=Optional.absent()), CommonSelectItem(expression=book_desc, alias=Optional.absent()), CommonSelectItem(expression=last_index_name, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent()), CommonSelectItem(expression=author_name, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.absent(), name=Optional.of(create_time), orderDirection=DESC, nullOrderDirection=ASC, index=-1, alias=Optional.of(ORDER_BY_DERIVED_0))], limit=null, subQueryStatement=null)
2022-02-22 10:33:12,043 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=2)), containStar=false, selectListLastPosition=151, groupByLastPosition=0, items=[CommonSelectItem(expression=cat_name, alias=Optional.absent()), CommonSelectItem(expression=book_name, alias=Optional.absent()), CommonSelectItem(expression=pic_url, alias=Optional.absent()), CommonSelectItem(expression=last_index_id, alias=Optional.absent()), CommonSelectItem(expression=last_index_update_time, alias=Optional.absent()), CommonSelectItem(expression=cat_id, alias=Optional.absent()), CommonSelectItem(expression=word_count, alias=Optional.absent()), CommonSelectItem(expression=author_id, alias=Optional.absent()), CommonSelectItem(expression=book_desc, alias=Optional.absent()), CommonSelectItem(expression=last_index_name, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent()), CommonSelectItem(expression=author_name, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.absent(), name=Optional.of(last_index_update_time), orderDirection=DESC, nullOrderDirection=ASC, index=-1, alias=Optional.absent())], limit=null, subQueryStatement=null)
2022-02-22 10:33:12,043 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status
        from book_setting t1 inner join book t2
        on t1.book_id = t2.id
        order by t1.sort
2022-02-22 10:33:12,043 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time , visit_count AS ORDER_BY_DERIVED_0 from book where word_count > ? order by visit_count DESC limit ? ::: [[0, 10]]
2022-02-22 10:33:12,043 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time , create_time AS ORDER_BY_DERIVED_0 from book where word_count > ? order by create_time DESC limit ? ::: [[0, 10]]
2022-02-22 10:33:12,043 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by last_index_update_time DESC limit ? ::: [[0, 23]]
2022-02-22 10:33:12,088 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2022-02-22 10:33:12,088 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2022-02-22 10:33:12,090 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 2
2022-02-22 10:33:12,090 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 2
2022-02-22 10:33:12,090 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:33:12,090 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:33:12,090 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:33:12,090 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:33:12,090 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:33:12,090 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:33:12,095 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?; 
2022-02-22 10:33:12,095 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?; 
2022-02-22 10:33:12,096 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 31(Integer)
2022-02-22 10:33:12,096 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 31(Integer)
2022-02-22 10:33:12,097 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:33:12,099 INFO (SQLLogger.java:71)- Logic SQL: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?;
2022-02-22 10:33:12,099 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[ItemsToken(isFirstOfItemsSpecial=false, items=[RAND() AS ORDER_BY_DERIVED_0 ]), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=1)), containStar=false, selectListLastPosition=56, groupByLastPosition=0, items=[CommonSelectItem(expression=book_name, alias=Optional.absent()), CommonSelectItem(expression=pic_url, alias=Optional.absent()), CommonSelectItem(expression=score, alias=Optional.absent()), CommonSelectItem(expression=book_desc, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent()), CommonSelectItem(expression=author_name, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.absent(), name=Optional.of(score), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.absent()), OrderItem(owner=Optional.absent(), name=Optional.of(RAND()), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.of(ORDER_BY_DERIVED_0))], limit=null, subQueryStatement=null)
2022-02-22 10:33:12,100 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id,book_name,author_name,pic_url,book_desc,score , RAND() AS ORDER_BY_DERIVED_0 from book ORDER BY score,RAND() LIMIT ?; ::: [[31]]
2022-02-22 10:33:12,102 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:33:12,102 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:33:56,134 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, username, nick_name from user where username = ? and password = ? 
2022-02-22 10:33:56,134 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, username, nick_name from user where username = ? and password = ? 
2022-02-22 10:33:56,134 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 18616959965(String), e10adc3949ba59abbe56e057f20f883e(String)
2022-02-22 10:33:56,134 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 18616959965(String), e10adc3949ba59abbe56e057f20f883e(String)
2022-02-22 10:33:56,136 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:33:56,136 INFO (SQLLogger.java:71)- Logic SQL: select id, username, nick_name from user where username = ? and password = ?
2022-02-22 10:33:56,136 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=user, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[TableToken(skippedSchemaNameLength=0, originalLiterals=user)], parametersIndex=2)), containStar=false, selectListLastPosition=31, groupByLastPosition=0, items=[CommonSelectItem(expression=username, alias=Optional.absent()), CommonSelectItem(expression=nick_name, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent())], groupByItems=[], orderByItems=[], limit=null, subQueryStatement=null)
2022-02-22 10:33:56,136 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id, username, nick_name from user where username = ? and password = ? ::: [[18616959965, e10adc3949ba59abbe56e057f20f883e]]
2022-02-22 10:33:56,139 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:33:56,139 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:33:56,402 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status from book_setting t1 inner join book t2 on t1.book_id = t2.id order by t1.sort 
2022-02-22 10:33:56,402 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status from book_setting t1 inner join book t2 on t1.book_id = t2.id order by t1.sort 
2022-02-22 10:33:56,402 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2022-02-22 10:33:56,402 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2022-02-22 10:33:56,403 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:33:56,404 INFO (SQLLogger.java:71)- Logic SQL: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status
        from book_setting t1 inner join book t2
        on t1.book_id = t2.id
        order by t1.sort
2022-02-22 10:33:56,405 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book_setting, alias=Optional.of(t1)), Table(name=book, alias=Optional.of(t2))]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[TableToken(skippedSchemaNameLength=0, originalLiterals=book_setting), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=0)), containStar=false, selectListLastPosition=140, groupByLastPosition=0, items=[CommonSelectItem(expression=t2.book_name, alias=Optional.absent()), CommonSelectItem(expression=t2.score, alias=Optional.absent()), CommonSelectItem(expression=t2.author_name, alias=Optional.absent()), CommonSelectItem(expression=t1.book_id, alias=Optional.absent()), CommonSelectItem(expression=t1.type, alias=Optional.absent()), CommonSelectItem(expression=t2.cat_id, alias=Optional.absent()), CommonSelectItem(expression=t2.pic_url, alias=Optional.absent()), CommonSelectItem(expression=t2.cat_name, alias=Optional.absent()), CommonSelectItem(expression=t2.book_desc, alias=Optional.absent()), CommonSelectItem(expression=t2.book_status, alias=Optional.absent()), CommonSelectItem(expression=t1.sort, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.of(t1), name=Optional.of(sort), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.absent())], limit=null, subQueryStatement=null)
2022-02-22 10:33:56,405 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status
        from book_setting t1 inner join book t2
        on t1.book_id = t2.id
        order by t1.sort
2022-02-22 10:33:56,408 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2022-02-22 10:33:56,408 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2022-02-22 10:33:56,409 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?; 
2022-02-22 10:33:56,409 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?; 
2022-02-22 10:33:56,410 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 31(Integer)
2022-02-22 10:33:56,410 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 31(Integer)
2022-02-22 10:33:56,410 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:33:56,411 INFO (SQLLogger.java:71)- Logic SQL: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?;
2022-02-22 10:33:56,412 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[ItemsToken(isFirstOfItemsSpecial=false, items=[RAND() AS ORDER_BY_DERIVED_0 ]), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=1)), containStar=false, selectListLastPosition=56, groupByLastPosition=0, items=[CommonSelectItem(expression=book_name, alias=Optional.absent()), CommonSelectItem(expression=pic_url, alias=Optional.absent()), CommonSelectItem(expression=score, alias=Optional.absent()), CommonSelectItem(expression=book_desc, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent()), CommonSelectItem(expression=author_name, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.absent(), name=Optional.of(score), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.absent()), OrderItem(owner=Optional.absent(), name=Optional.of(RAND()), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.of(ORDER_BY_DERIVED_0))], limit=null, subQueryStatement=null)
2022-02-22 10:33:56,412 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id,book_name,author_name,pic_url,book_desc,score , RAND() AS ORDER_BY_DERIVED_0 from book ORDER BY score,RAND() LIMIT ?; ::: [[31]]
2022-02-22 10:33:56,414 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:33:56,414 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:34:58,049 INFO (ExecutorConfigurationSupport.java:208)- Shutting down ExecutorService 'taskScheduler'
2022-02-22 10:34:58,050 INFO (MBeanRegistrationSupport.java:210)- Could not unregister MBean [com.github.tobato.fastdfs.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2022-02-22 10:34:58,057 INFO (HikariDataSource.java:350)- HikariPool-1 - Shutdown initiated...
2022-02-22 10:34:58,060 INFO (HikariDataSource.java:352)- HikariPool-1 - Shutdown completed.
2022-02-22 10:36:18,613 INFO (StartupInfoLogger.java:50)- Starting FrontNovelApplication on LAPTOP-T7DEB7H8 with PID 43936 (E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem\novel-front\target\classes started by yangys in E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem)
2022-02-22 10:36:18,613 INFO (StartupInfoLogger.java:50)- Starting FrontNovelApplication on LAPTOP-T7DEB7H8 with PID 43936 (E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem\novel-front\target\classes started by yangys in E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem)
2022-02-22 10:36:18,616 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2022-02-22 10:36:18,616 DEBUG (StartupInfoLogger.java:53)- Running with Spring Boot v2.1.8.RELEASE, Spring v5.1.9.RELEASE
2022-02-22 10:36:18,616 INFO (SpringApplication.java:652)- The following profiles are active: website,alipay,oss,fastdfs,dev,common-dev,common
2022-02-22 10:36:18,616 INFO (SpringApplication.java:652)- The following profiles are active: website,alipay,oss,fastdfs,dev,common-dev,common
2022-02-22 10:36:19,445 INFO (RepositoryConfigurationDelegate.java:244)- Multiple Spring Data modules found, entering strict repository configuration mode!
2022-02-22 10:36:19,447 INFO (RepositoryConfigurationDelegate.java:126)- Bootstrapping Spring Data repositories in DEFAULT mode.
2022-02-22 10:36:19,480 INFO (RepositoryConfigurationDelegate.java:182)- Finished Spring Data repository scanning in 30ms. Found 0 repository interfaces.
2022-02-22 10:36:19,491 INFO (RepositoryConfigurationDelegate.java:244)- Multiple Spring Data modules found, entering strict repository configuration mode!
2022-02-22 10:36:19,493 INFO (RepositoryConfigurationDelegate.java:126)- Bootstrapping Spring Data repositories in DEFAULT mode.
2022-02-22 10:36:19,516 INFO (RepositoryConfigurationDelegate.java:182)- Finished Spring Data repository scanning in 13ms. Found 0 repository interfaces.
2022-02-22 10:36:20,043 INFO (PostProcessorRegistrationDelegate.java:330)- Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$c20e94c9] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2022-02-22 10:36:20,536 INFO (TomcatWebServer.java:90)- Tomcat initialized with port(s): 8080 (http)
2022-02-22 10:36:20,566 INFO (DirectJDKLog.java:173)- Initializing ProtocolHandler ["http-nio-8080"]
2022-02-22 10:36:20,581 INFO (DirectJDKLog.java:173)- Starting service [Tomcat]
2022-02-22 10:36:20,582 INFO (DirectJDKLog.java:173)- Starting Servlet engine: [Apache Tomcat/9.0.24]
2022-02-22 10:36:20,728 INFO (DirectJDKLog.java:173)- Initializing Spring embedded WebApplicationContext
2022-02-22 10:36:20,728 INFO (ServletWebServerApplicationContext.java:284)- Root WebApplicationContext: initialization completed in 1966 ms
2022-02-22 10:36:21,148 INFO (HikariDataSource.java:110)- HikariPool-1 - Starting...
2022-02-22 10:36:21,250 INFO (HikariDataSource.java:123)- HikariPool-1 - Start completed.
2022-02-22 10:36:21,680 WARN (CacheConfiguration.java:1795)- Cache: util_cache has a maxElementsInMemory of 0. This might lead to performance degradation or OutOfMemoryError at Terracotta client.From Ehcache 2.0 onwards this has been changed to mean a store with no capacity limit. Set it to 1 if you want no elements cached in memory
2022-02-22 10:36:21,696 WARN (DiskStorePathManager.java:162)- diskStorePath 'E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem\cachedata' is already used by an existing CacheManager either in the same VM or in a different process.
The diskStore path for this CacheManager will be set to E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem\cachedata\ehcache_auto_created4483314914753518595diskstore.
To avoid this warning consider using the CacheManager factory methods to create a singleton CacheManager or specifying a separate ehcache configuration (ehcache.xml) for each CacheManager instance.
2022-02-22 10:36:21,696 WARN (DiskStorageFactory.java:134)- Data in persistent disk stores is ignored for stores from automatically created directories.
Remove diskPersistent or resolve the conflicting disk paths in cache configuration.
Deleting data file E:\SimpleGraduationProjects\ChangLeLiteraryNovelManagementSystem\cachedata\ehcache_auto_created4483314914753518595diskstore\util_cache.data
2022-02-22 10:36:23,057 INFO (AbstractJestClient.java:60)- Setting server pool to a list of 1 servers: [http://192.168.0.105:9200]
2022-02-22 10:36:23,058 INFO (JestClientFactory.java:224)- Using multi thread/connection supporting pooling connection manager
2022-02-22 10:36:23,116 INFO (JestClientFactory.java:70)- Using custom GSON instance
2022-02-22 10:36:23,116 INFO (JestClientFactory.java:85)- Node Discovery disabled...
2022-02-22 10:36:23,116 INFO (JestClientFactory.java:97)- Idle connection reaping disabled...
2022-02-22 10:36:23,496 INFO (ExecutorConfigurationSupport.java:171)- Initializing ExecutorService 'taskScheduler'
2022-02-22 10:36:23,764 INFO (WelcomePageHandlerMapping.java:58)- Adding welcome page template: index
2022-02-22 10:36:23,806 WARN (TemplateMode.java:150)- [THYMELEAF][main] Template Mode 'LEGACYHTML5' is deprecated. Using Template Mode 'HTML' instead.
2022-02-22 10:36:24,269 WARN (RedisStarterDeprecationWarningAutoConfiguration.java:43)- spring-boot-starter-redis is deprecated as of Spring Boot 1.4, please migrate to spring-boot-starter-data-redis
2022-02-22 10:36:24,346 INFO (DirectJDKLog.java:173)- Starting ProtocolHandler ["http-nio-8080"]
2022-02-22 10:36:24,358 INFO (TomcatWebServer.java:202)- Tomcat started on port(s): 8080 (http) with context path ''
2022-02-22 10:36:24,361 INFO (StartupInfoLogger.java:59)- Started FrontNovelApplication in 6.448 seconds (JVM running for 7.808)
2022-02-22 10:36:24,361 INFO (StartupInfoLogger.java:59)- Started FrontNovelApplication in 6.448 seconds (JVM running for 7.808)
2022-02-22 10:36:27,295 INFO (DirectJDKLog.java:173)- A cookie header was received [1644941556; userClientMarkKey=b0961165332d49a98693485228cbbf33; Hm_lvt_ecc8b50a3122e6d5e09be7a9e5383e07=1645432522,1645497192; Authorization=eyJhbGciOiJIUzUxMiJ9.eyJleHAiOjE2NDYxMDIwMzYsInN1YiI6IntcImlkXCI6MTQ5NTY4MDA5ODA4NTU2NDQxNixcInVzZXJuYW1lXCI6XCIxODYxNjk1OTk2NVwiLFwibmlja05hbWVcIjpcIjE4NjE2OTU5OTY1XCJ9IiwiY3JlYXRlZCI6MTY0NTQ5NzIzNjQxMX0.g5Piqn2sXd4088XMqHOabm2LeVAH2CcGPZj8X73iGr84--4R6_NJgzgFxr4BmLeCTWUE0VrFJ0N9lkL6bPvp0g; Hm_lpvt_ecc8b50a3122e6d5e09be7a9e5383e07=1645497237] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2022-02-22 10:36:27,302 INFO (DirectJDKLog.java:173)- Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-02-22 10:36:27,303 INFO (FrameworkServlet.java:524)- Initializing Servlet 'dispatcherServlet'
2022-02-22 10:36:27,310 INFO (FrameworkServlet.java:546)- Completed initialization in 7 ms
2022-02-22 10:36:27,686 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status from book_setting t1 inner join book t2 on t1.book_id = t2.id order by t1.sort 
2022-02-22 10:36:27,686 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status from book_setting t1 inner join book t2 on t1.book_id = t2.id order by t1.sort 
2022-02-22 10:36:27,690 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_name, cat_id, title, create_time from news order by create_time DESC limit ? 
2022-02-22 10:36:27,690 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_name, cat_id, title, create_time from news order by create_time DESC limit ? 
2022-02-22 10:36:27,690 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by visit_count DESC limit ? 
2022-02-22 10:36:27,690 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by last_index_update_time DESC limit ? 
2022-02-22 10:36:27,690 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by create_time DESC limit ? 
2022-02-22 10:36:27,690 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by visit_count DESC limit ? 
2022-02-22 10:36:27,690 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by last_index_update_time DESC limit ? 
2022-02-22 10:36:27,690 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by create_time DESC limit ? 
2022-02-22 10:36:27,702 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2022-02-22 10:36:27,703 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 2(Long)
2022-02-22 10:36:27,702 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2022-02-22 10:36:27,703 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 2(Long)
2022-02-22 10:36:27,703 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0(Integer), 10(Long)
2022-02-22 10:36:27,703 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0(Integer), 23(Long)
2022-02-22 10:36:27,703 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0(Integer), 10(Long)
2022-02-22 10:36:27,703 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0(Integer), 10(Long)
2022-02-22 10:36:27,703 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0(Integer), 23(Long)
2022-02-22 10:36:27,703 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 0(Integer), 10(Long)
2022-02-22 10:36:27,740 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:36:27,740 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:36:27,740 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:36:27,740 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:36:27,740 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:36:27,741 INFO (SQLLogger.java:71)- Logic SQL: select id, cat_name, cat_id, title, create_time from news order by create_time DESC limit ?
2022-02-22 10:36:27,741 INFO (SQLLogger.java:71)- Logic SQL: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status
        from book_setting t1 inner join book t2
        on t1.book_id = t2.id
        order by t1.sort
2022-02-22 10:36:27,741 INFO (SQLLogger.java:71)- Logic SQL: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by visit_count DESC limit ?
2022-02-22 10:36:27,741 INFO (SQLLogger.java:71)- Logic SQL: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by last_index_update_time DESC limit ?
2022-02-22 10:36:27,741 INFO (SQLLogger.java:71)- Logic SQL: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by create_time DESC limit ?
2022-02-22 10:36:27,741 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=news, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[TableToken(skippedSchemaNameLength=0, originalLiterals=news)], parametersIndex=1)), containStar=false, selectListLastPosition=48, groupByLastPosition=0, items=[CommonSelectItem(expression=cat_name, alias=Optional.absent()), CommonSelectItem(expression=cat_id, alias=Optional.absent()), CommonSelectItem(expression=create_time, alias=Optional.absent()), CommonSelectItem(expression=title, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.absent(), name=Optional.of(create_time), orderDirection=DESC, nullOrderDirection=ASC, index=-1, alias=Optional.absent())], limit=null, subQueryStatement=null)
2022-02-22 10:36:27,741 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id, cat_name, cat_id, title, create_time from news order by create_time DESC limit ? ::: [[2]]
2022-02-22 10:36:27,741 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book_setting, alias=Optional.of(t1)), Table(name=book, alias=Optional.of(t2))]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[TableToken(skippedSchemaNameLength=0, originalLiterals=book_setting), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=0)), containStar=false, selectListLastPosition=140, groupByLastPosition=0, items=[CommonSelectItem(expression=t2.book_name, alias=Optional.absent()), CommonSelectItem(expression=t2.score, alias=Optional.absent()), CommonSelectItem(expression=t2.author_name, alias=Optional.absent()), CommonSelectItem(expression=t1.book_id, alias=Optional.absent()), CommonSelectItem(expression=t1.type, alias=Optional.absent()), CommonSelectItem(expression=t2.cat_id, alias=Optional.absent()), CommonSelectItem(expression=t2.pic_url, alias=Optional.absent()), CommonSelectItem(expression=t2.cat_name, alias=Optional.absent()), CommonSelectItem(expression=t2.book_desc, alias=Optional.absent()), CommonSelectItem(expression=t2.book_status, alias=Optional.absent()), CommonSelectItem(expression=t1.sort, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.of(t1), name=Optional.of(sort), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.absent())], limit=null, subQueryStatement=null)
2022-02-22 10:36:27,741 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[ItemsToken(isFirstOfItemsSpecial=false, items=[visit_count AS ORDER_BY_DERIVED_0 ]), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=2)), containStar=false, selectListLastPosition=151, groupByLastPosition=0, items=[CommonSelectItem(expression=cat_name, alias=Optional.absent()), CommonSelectItem(expression=book_name, alias=Optional.absent()), CommonSelectItem(expression=pic_url, alias=Optional.absent()), CommonSelectItem(expression=last_index_id, alias=Optional.absent()), CommonSelectItem(expression=last_index_update_time, alias=Optional.absent()), CommonSelectItem(expression=cat_id, alias=Optional.absent()), CommonSelectItem(expression=word_count, alias=Optional.absent()), CommonSelectItem(expression=author_id, alias=Optional.absent()), CommonSelectItem(expression=book_desc, alias=Optional.absent()), CommonSelectItem(expression=last_index_name, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent()), CommonSelectItem(expression=author_name, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.absent(), name=Optional.of(visit_count), orderDirection=DESC, nullOrderDirection=ASC, index=-1, alias=Optional.of(ORDER_BY_DERIVED_0))], limit=null, subQueryStatement=null)
2022-02-22 10:36:27,741 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=2)), containStar=false, selectListLastPosition=151, groupByLastPosition=0, items=[CommonSelectItem(expression=cat_name, alias=Optional.absent()), CommonSelectItem(expression=book_name, alias=Optional.absent()), CommonSelectItem(expression=pic_url, alias=Optional.absent()), CommonSelectItem(expression=last_index_id, alias=Optional.absent()), CommonSelectItem(expression=last_index_update_time, alias=Optional.absent()), CommonSelectItem(expression=cat_id, alias=Optional.absent()), CommonSelectItem(expression=word_count, alias=Optional.absent()), CommonSelectItem(expression=author_id, alias=Optional.absent()), CommonSelectItem(expression=book_desc, alias=Optional.absent()), CommonSelectItem(expression=last_index_name, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent()), CommonSelectItem(expression=author_name, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.absent(), name=Optional.of(last_index_update_time), orderDirection=DESC, nullOrderDirection=ASC, index=-1, alias=Optional.absent())], limit=null, subQueryStatement=null)
2022-02-22 10:36:27,741 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[ItemsToken(isFirstOfItemsSpecial=false, items=[create_time AS ORDER_BY_DERIVED_0 ]), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=2)), containStar=false, selectListLastPosition=151, groupByLastPosition=0, items=[CommonSelectItem(expression=cat_name, alias=Optional.absent()), CommonSelectItem(expression=book_name, alias=Optional.absent()), CommonSelectItem(expression=pic_url, alias=Optional.absent()), CommonSelectItem(expression=last_index_id, alias=Optional.absent()), CommonSelectItem(expression=last_index_update_time, alias=Optional.absent()), CommonSelectItem(expression=cat_id, alias=Optional.absent()), CommonSelectItem(expression=word_count, alias=Optional.absent()), CommonSelectItem(expression=author_id, alias=Optional.absent()), CommonSelectItem(expression=book_desc, alias=Optional.absent()), CommonSelectItem(expression=last_index_name, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent()), CommonSelectItem(expression=author_name, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.absent(), name=Optional.of(create_time), orderDirection=DESC, nullOrderDirection=ASC, index=-1, alias=Optional.of(ORDER_BY_DERIVED_0))], limit=null, subQueryStatement=null)
2022-02-22 10:36:27,742 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status
        from book_setting t1 inner join book t2
        on t1.book_id = t2.id
        order by t1.sort
2022-02-22 10:36:27,742 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time , visit_count AS ORDER_BY_DERIVED_0 from book where word_count > ? order by visit_count DESC limit ? ::: [[0, 10]]
2022-02-22 10:36:27,742 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time from book where word_count > ? order by last_index_update_time DESC limit ? ::: [[0, 23]]
2022-02-22 10:36:27,742 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id, cat_id, cat_name, book_name, last_index_id, last_index_name, author_id, author_name, pic_url, book_desc, word_count, last_index_update_time , create_time AS ORDER_BY_DERIVED_0 from book where word_count > ? order by create_time DESC limit ? ::: [[0, 10]]
2022-02-22 10:36:27,815 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2022-02-22 10:36:27,815 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2022-02-22 10:36:27,817 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 2
2022-02-22 10:36:27,817 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 2
2022-02-22 10:36:27,817 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:36:27,817 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:36:27,817 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:36:27,817 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:36:27,817 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:36:27,817 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:36:27,823 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?; 
2022-02-22 10:36:27,823 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?; 
2022-02-22 10:36:27,823 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 31(Integer)
2022-02-22 10:36:27,823 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 31(Integer)
2022-02-22 10:36:27,825 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:36:27,826 INFO (SQLLogger.java:71)- Logic SQL: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?;
2022-02-22 10:36:27,826 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[ItemsToken(isFirstOfItemsSpecial=false, items=[RAND() AS ORDER_BY_DERIVED_0 ]), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=1)), containStar=false, selectListLastPosition=56, groupByLastPosition=0, items=[CommonSelectItem(expression=book_name, alias=Optional.absent()), CommonSelectItem(expression=pic_url, alias=Optional.absent()), CommonSelectItem(expression=score, alias=Optional.absent()), CommonSelectItem(expression=book_desc, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent()), CommonSelectItem(expression=author_name, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.absent(), name=Optional.of(score), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.absent()), OrderItem(owner=Optional.absent(), name=Optional.of(RAND()), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.of(ORDER_BY_DERIVED_0))], limit=null, subQueryStatement=null)
2022-02-22 10:36:27,826 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id,book_name,author_name,pic_url,book_desc,score , RAND() AS ORDER_BY_DERIVED_0 from book ORDER BY score,RAND() LIMIT ?; ::: [[31]]
2022-02-22 10:36:27,830 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:36:27,830 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:36:29,346 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status from book_setting t1 inner join book t2 on t1.book_id = t2.id order by t1.sort 
2022-02-22 10:36:29,346 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status from book_setting t1 inner join book t2 on t1.book_id = t2.id order by t1.sort 
2022-02-22 10:36:29,346 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2022-02-22 10:36:29,346 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2022-02-22 10:36:29,347 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:36:29,348 INFO (SQLLogger.java:71)- Logic SQL: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status
        from book_setting t1 inner join book t2
        on t1.book_id = t2.id
        order by t1.sort
2022-02-22 10:36:29,348 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book_setting, alias=Optional.of(t1)), Table(name=book, alias=Optional.of(t2))]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[TableToken(skippedSchemaNameLength=0, originalLiterals=book_setting), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=0)), containStar=false, selectListLastPosition=140, groupByLastPosition=0, items=[CommonSelectItem(expression=t2.book_name, alias=Optional.absent()), CommonSelectItem(expression=t2.score, alias=Optional.absent()), CommonSelectItem(expression=t2.author_name, alias=Optional.absent()), CommonSelectItem(expression=t1.book_id, alias=Optional.absent()), CommonSelectItem(expression=t1.type, alias=Optional.absent()), CommonSelectItem(expression=t2.cat_id, alias=Optional.absent()), CommonSelectItem(expression=t2.pic_url, alias=Optional.absent()), CommonSelectItem(expression=t2.cat_name, alias=Optional.absent()), CommonSelectItem(expression=t2.book_desc, alias=Optional.absent()), CommonSelectItem(expression=t2.book_status, alias=Optional.absent()), CommonSelectItem(expression=t1.sort, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.of(t1), name=Optional.of(sort), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.absent())], limit=null, subQueryStatement=null)
2022-02-22 10:36:29,349 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status
        from book_setting t1 inner join book t2
        on t1.book_id = t2.id
        order by t1.sort
2022-02-22 10:36:29,351 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2022-02-22 10:36:29,351 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2022-02-22 10:36:29,352 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?; 
2022-02-22 10:36:29,352 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?; 
2022-02-22 10:36:29,352 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 31(Integer)
2022-02-22 10:36:29,352 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 31(Integer)
2022-02-22 10:36:29,353 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:36:29,353 INFO (SQLLogger.java:71)- Logic SQL: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?;
2022-02-22 10:36:29,353 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[ItemsToken(isFirstOfItemsSpecial=false, items=[RAND() AS ORDER_BY_DERIVED_0 ]), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=1)), containStar=false, selectListLastPosition=56, groupByLastPosition=0, items=[CommonSelectItem(expression=book_name, alias=Optional.absent()), CommonSelectItem(expression=pic_url, alias=Optional.absent()), CommonSelectItem(expression=score, alias=Optional.absent()), CommonSelectItem(expression=book_desc, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent()), CommonSelectItem(expression=author_name, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.absent(), name=Optional.of(score), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.absent()), OrderItem(owner=Optional.absent(), name=Optional.of(RAND()), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.of(ORDER_BY_DERIVED_0))], limit=null, subQueryStatement=null)
2022-02-22 10:36:29,354 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id,book_name,author_name,pic_url,book_desc,score , RAND() AS ORDER_BY_DERIVED_0 from book ORDER BY score,RAND() LIMIT ?; ::: [[31]]
2022-02-22 10:36:29,355 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:36:29,355 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:36:31,124 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, username, nick_name from user where username = ? and password = ? 
2022-02-22 10:36:31,124 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id, username, nick_name from user where username = ? and password = ? 
2022-02-22 10:36:31,125 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 18616959965(String), e10adc3949ba59abbe56e057f20f883e(String)
2022-02-22 10:36:31,125 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 18616959965(String), e10adc3949ba59abbe56e057f20f883e(String)
2022-02-22 10:36:31,126 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:36:31,126 INFO (SQLLogger.java:71)- Logic SQL: select id, username, nick_name from user where username = ? and password = ?
2022-02-22 10:36:31,126 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=user, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[TableToken(skippedSchemaNameLength=0, originalLiterals=user)], parametersIndex=2)), containStar=false, selectListLastPosition=31, groupByLastPosition=0, items=[CommonSelectItem(expression=username, alias=Optional.absent()), CommonSelectItem(expression=nick_name, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent())], groupByItems=[], orderByItems=[], limit=null, subQueryStatement=null)
2022-02-22 10:36:31,126 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id, username, nick_name from user where username = ? and password = ? ::: [[18616959965, e10adc3949ba59abbe56e057f20f883e]]
2022-02-22 10:36:31,129 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:36:31,129 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:36:31,182 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status from book_setting t1 inner join book t2 on t1.book_id = t2.id order by t1.sort 
2022-02-22 10:36:31,182 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status from book_setting t1 inner join book t2 on t1.book_id = t2.id order by t1.sort 
2022-02-22 10:36:31,183 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2022-02-22 10:36:31,183 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 
2022-02-22 10:36:31,183 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:36:31,184 INFO (SQLLogger.java:71)- Logic SQL: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status
        from book_setting t1 inner join book t2
        on t1.book_id = t2.id
        order by t1.sort
2022-02-22 10:36:31,184 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book_setting, alias=Optional.of(t1)), Table(name=book, alias=Optional.of(t2))]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[TableToken(skippedSchemaNameLength=0, originalLiterals=book_setting), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=0)), containStar=false, selectListLastPosition=140, groupByLastPosition=0, items=[CommonSelectItem(expression=t2.book_name, alias=Optional.absent()), CommonSelectItem(expression=t2.score, alias=Optional.absent()), CommonSelectItem(expression=t2.author_name, alias=Optional.absent()), CommonSelectItem(expression=t1.book_id, alias=Optional.absent()), CommonSelectItem(expression=t1.type, alias=Optional.absent()), CommonSelectItem(expression=t2.cat_id, alias=Optional.absent()), CommonSelectItem(expression=t2.pic_url, alias=Optional.absent()), CommonSelectItem(expression=t2.cat_name, alias=Optional.absent()), CommonSelectItem(expression=t2.book_desc, alias=Optional.absent()), CommonSelectItem(expression=t2.book_status, alias=Optional.absent()), CommonSelectItem(expression=t1.sort, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.of(t1), name=Optional.of(sort), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.absent())], limit=null, subQueryStatement=null)
2022-02-22 10:36:31,185 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select t1.book_id,t1.type,t1.sort,t2.book_name,t2.author_name,t2.pic_url,t2.book_desc,t2.score,t2.cat_id,t2.cat_name,t2.book_status
        from book_setting t1 inner join book t2
        on t1.book_id = t2.id
        order by t1.sort
2022-02-22 10:36:31,187 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2022-02-22 10:36:31,187 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 0
2022-02-22 10:36:31,188 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?; 
2022-02-22 10:36:31,188 DEBUG (BaseJdbcLogger.java:159)- ==>  Preparing: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?; 
2022-02-22 10:36:31,188 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 31(Integer)
2022-02-22 10:36:31,188 DEBUG (BaseJdbcLogger.java:159)- ==> Parameters: 31(Integer)
2022-02-22 10:36:31,189 INFO (SQLLogger.java:71)- Rule Type: sharding
2022-02-22 10:36:31,189 INFO (SQLLogger.java:71)- Logic SQL: select id,book_name,author_name,pic_url,book_desc,score from book ORDER BY score,RAND() LIMIT ?;
2022-02-22 10:36:31,189 INFO (SQLLogger.java:71)- SQLStatement: SelectStatement(super=DQLStatement(super=AbstractSQLStatement(type=DQL, tables=Tables(tables=[Table(name=book, alias=Optional.absent())]), conditions=Conditions(orCondition=OrCondition(andConditions=[])), sqlTokens=[ItemsToken(isFirstOfItemsSpecial=false, items=[RAND() AS ORDER_BY_DERIVED_0 ]), TableToken(skippedSchemaNameLength=0, originalLiterals=book)], parametersIndex=1)), containStar=false, selectListLastPosition=56, groupByLastPosition=0, items=[CommonSelectItem(expression=book_name, alias=Optional.absent()), CommonSelectItem(expression=pic_url, alias=Optional.absent()), CommonSelectItem(expression=score, alias=Optional.absent()), CommonSelectItem(expression=book_desc, alias=Optional.absent()), CommonSelectItem(expression=id, alias=Optional.absent()), CommonSelectItem(expression=author_name, alias=Optional.absent())], groupByItems=[], orderByItems=[OrderItem(owner=Optional.absent(), name=Optional.of(score), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.absent()), OrderItem(owner=Optional.absent(), name=Optional.of(RAND()), orderDirection=ASC, nullOrderDirection=ASC, index=-1, alias=Optional.of(ORDER_BY_DERIVED_0))], limit=null, subQueryStatement=null)
2022-02-22 10:36:31,190 INFO (SQLLogger.java:71)- Actual SQL: ds0 ::: select id,book_name,author_name,pic_url,book_desc,score , RAND() AS ORDER_BY_DERIVED_0 from book ORDER BY score,RAND() LIMIT ?; ::: [[31]]
2022-02-22 10:36:31,192 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:36:31,192 DEBUG (BaseJdbcLogger.java:159)- <==      Total: 1
2022-02-22 10:39:16,896 INFO (ExecutorConfigurationSupport.java:208)- Shutting down ExecutorService 'taskScheduler'
2022-02-22 10:39:16,898 INFO (MBeanRegistrationSupport.java:210)- Could not unregister MBean [com.github.tobato.fastdfs.conn:name=fdfsConnectionPool,type=FdfsConnectionPool] as said MBean is not registered (perhaps already unregistered by an external process)
2022-02-22 10:39:16,911 INFO (HikariDataSource.java:350)- HikariPool-1 - Shutdown initiated...
2022-02-22 10:39:16,914 INFO (HikariDataSource.java:352)- HikariPool-1 - Shutdown completed.
